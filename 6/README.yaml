# Copyright (c) 2017, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Google Inc. nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Google Inc. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Used with http://github.com/GoogleCloudPlatform/runtimes-common/tree/master/docgen
_templates:
- &Image launcher.gcr.io/google/elasticsearch6
- &PullCommand gcloud docker -- pull launcher.gcr.io/google/elasticsearch6
- &ServiceArgs
  name: elasticsearch
  image: *Image
- &BaseServerRun
  <<: *ServiceArgs
  exposedPorts:
  - port: 9200
- &BaseExec
  execType: INTERACTIVE_SHELL

overview:
  description: |-
    This image contains an installation Elasticsearch 6.x.
    For more information, see the [Official Image Launcher Page](https://console.cloud.google.com/launcher/details/google/elasticsearch6).
  dockerfileUrl: https://github.com/GoogleCloudPlatform/elasticsearch-docker/tree/master/6
  pullCommand: *PullCommand

taskGroups:

- title: Run Elasticsearch
  tasks:
  - title: Start an Elasticsearch instance
    runtimes: [DOCKER, KUBERNETES]
    instructions:
    - run:
        <<: *BaseServerRun
    - description: >-
        Elasticsearch host requires configured enviroment. On Linux host please
        run `sysctl -w vm.max_map_count=262144`. For details please check
        [official documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/vm-max-map-count.html).
    - description: >-
        To retain Elasticsearch data across container restarts, see
        [](#use-a-persistent-data-volume).
    - description: >-
        To configure your application, see [](#configurations).
  - title: Use a persistent data volume
    anchorId: use-a-persistent-data-volume
    description: >-
      To retain Elasticsearch data across container restarts, we should use
      a persistent volume for `/usr/share/elasticsearch/data`.
    runtimes: [DOCKER, KUBERNETES]
    instructions:
    - description: >-
        Assume `/path/to/your/elasticsearch/data` is a
        persistent data folder on your host.
      applicableRuntimes: [DOCKER]
    - run:
        <<: *BaseServerRun
        volumes:
        - name: elasticsearchdata
          path: /usr/share/elasticsearch/data
          emptyPersistentVolume:
            hostPath: /path/to/your/elasticsearch/data

- title: Using Elasticsearch
  tasks:
  - title: Connect and start using Elasticsearch
    description: Attach to the container.
    runtimes: [DOCKER, KUBERNETES]
    instructions:
    - exec:
        <<: *BaseExec
        containerFromRun: *BaseServerRun
        command: bash
        subcommands:
        - description: >-
            The following examples use `curl`. First we need to install it as
            it is not installed by default.
          command: apt-get update && apt-get install -y curl
        - description: We can get test data into Elasticsearch using a HTTP PUT request. This will populate Elasticsearch with test data.
          command: |-
            curl -XPUT http://localhost:9200/estest/test/1 -d \
            '{
               "name" : "Elasticsearch Test",
               "Description": "This is just a test"
             }'
        - description: We can try searching for our test data using `curl`.
          command: curl http://localhost:9200/estest/_search?q=Test

- title: Configurations
  anchorId: configurations
  tasks:
  - title: Using configuration volume
    description: >-
      Assume `/path/to/your/elasticsearch.yml` is the configuration file on your
      localhost. We can mount this as volume at
      `/usr/share/elasticsearch/config/elasticsearch.yml` on the container for
      Elasticsearch to read from.
    runtimes: [DOCKER, KUBERNETES]
    instructions:
    - run:
        <<: *BaseServerRun
        volumes:
        - name: elasticsearchconfig
          path: /usr/share/elasticsearch/config
          singleFile:
            hostFile: /path/to/your/elasticsearch.yml
    - description: >-
        See [Elasticsearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html)
        on available configuration options.
    - description: >-
        Also see [Volume reference](#references-volumes).
- title: Clustering
  description: >-
  tasks:
  - title: Creating simple cluster
    description: >-
      In the following guide you will learn how to create simple two-node Elasticsearch cluster. This is only an example how to configure and link together containers, not a production ready configuration. For production ready configuration please refer to official documentation.
    runtimes: [DOCKER]
    instructions:
    - description: |-
        We will need a master node, that will also serve as a gateway to our cluster. Single agent node will be attached to the master node.
        Use the following content for the `docker-compose.yml` file, then run `docker-compose up`.
        ```yaml
        version: '2'
        services:
          elasticsearch-master:
            container_name: some-elasticsearch-master
            image: launcher.gcr.io/google/elasticsearch6
            ports:
              - '9200:9200'
            command:
              - '-Enetwork.host=0.0.0.0'
              - '-Etransport.tcp.port=9300'
              - '-Ehttp.port=9200'
          elasticsearch-agent:
            container_name: some-elasticsearch-agent
            image: launcher.gcr.io/google/elasticsearch6
            command:
              - '-Enetwork.host=0.0.0.0'
              - '-Etransport.tcp.port=9300'
              - '-Ehttp.port=9200'
              - '-Ediscovery.zen.ping.unicast.hosts=some-elasticsearch-master'
            depends_on:
              - elasticsearch-master
        ```
        Or you can use `docker run` directly:
        ```shell
        # elasticsearch-master
        docker run \
          --name some-elasticsearch-master \
          -p 9200:9200 \
          -d \
          launcher.gcr.io/google/elasticsearch6 \
          -Enetwork.host=0.0.0.0 \
          -Etransport.tcp.port=9300 \
          -Ehttp.port=9200
        # elasticsearch-agent
        docker run \
          --name some-elasticsearch-agent \
          --link some-elasticsearch-master \
          -d \
          launcher.gcr.io/google/elasticsearch6 \
          -Enetwork.host=0.0.0.0 \
          -Etransport.tcp.port=9300 \
          -Ehttp.port=9200 \
          -Ediscovery.zen.ping.unicast.hosts=some-elasticsearch-master
        ```
        After few seconds, we can check that cluster is running invoking `http://localhost:9200/_cluster/health`.
portReference:
  ports:
  - port: '9114'
    description: Prometheus exporter port.
  - port: '9200'
    description: Elasticsearch HTTP port.
  - port: '9300'
    description: Elasticsearch default communication port.

volumeReference:
  volumes:
  - path: /usr/share/elasticsearch/data
    description: Stores Elasticsearch data.
  - path: /usr/share/elasticsearch/config/elasticsearch.yml
    description: Stores configurations.
  - path: /usr/share/elasticsearch/config/log4j2.properties
    description: Stores logging configurations.

